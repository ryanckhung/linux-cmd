# copy local file to remote server
scp localfile.tar developer@10.6.72.58:/home/developer/ryan
scp <localfile> <username>@<IP>:<DestinationFullPath>

# cerate a user with a home directory and bash as shell
sudo useradd -m -d /home/test04/ -s /bin/bash test04
sudo passwd test04 
# -m creates the home directory if it does not exist.
# -d overrides the default home directory location. -s sets the login shell for the user.
# add the user to the sudo list
sudo usermod -aG sudo test04


# for restricted account use /bin/rbash which will limit it to work on the user home directory only
sudo useradd -m -d /home/test04/ -s /bin/rbash test04

#force the user to udpate the password during the next login
sudo chage -d 0 test04

# user list store in
/ect/passwd

# install docker
sudo apt-get install docker.io
sudo systemctl start docker

# find file under the current directory and it's subfolder
find . -name hello.txt

A filesystem is the methods and data structures that an operating system uses to keep track of files on a disk or partition; that is, the way the files are organized on the disk. The word is also used to refer to a partition or disk that is used to store the files or the type of the filesystem. Thus, one might say ``I have two filesystems'' meaning one has two partitions on which one stores files, or that one is using the ``extended filesystem'', meaning the type of the filesystem.

#wildcard
* - represents zero or more characters 
? - represents a single character
[] - represents a range of characters
ls [abc]*      -> list all files start with a/b/c and following anything
ls [a-c]*      -> same as above "a-c" mean abc
ls [a-c][b-z]* -> first character is a-c, the next char is b-z, then follow anything
ls [a-cx-z]*.  -> first character is abcxyz, then follow anything
ls he??o*      -> list all files start with "he" then following any 2 characters then "o" then anything

# hard link and soft link
ln f1.txt f1_link.txt    -> hard link (the content of either one change, both files content change; if the original file is gone, the link file will still exist)
ln -s f2.txt f2_link.txt -> soft link (the content of either one change, both files content change; if the original file is gone, the link file will become broken)

# command
command option(s) argument(s)

# file permission
rwx - read, write, execute
ugo - user, group, other(public)
chmod ugo+r <filename>
chmod 444 <filename>
chown changes the ownership of a file
chgrp changes the group ownership of a file

# Help
whatis <command>   -> whatis ls
<command> –-help   -> ls -help 
man <command>      -> man ls

# input and output redirects
1. standard input (stdin) - 0    => eg. what you type in keyboard
2. standard output (stdout) - 1  => eg. what you see in the terminal; the terminal output can redirect to a file or ...
3. stadnard error (stderr) - 2   => eg. no permission to access the /root folder
example:
ls -l /root 2> errfile.txt  => not root user access /root folder will give permssion eror; 2 means stderr; this cmd will only redirect the err msg to file

# tee command
echo hello world > file.txt => this will recirect the output to file only; but not terminal
if you want to redirect the output to multiple place, you need to use tee. 
echo hello world | tee file.txt => this will output it to screen and file
echo hello world | tee -a file.txt => this will output it to screen and append (not rewrite because tee with -a option) new content to the file
echo hello | tee f1.txt f2.txt f3.txt   => output to terminal and multiple file

# Text Edit
vi
Redirect command output > or >> 
echo > or >>
ls -al > temp.txt    -> originally it is output to the sceen; but now the output is REDIRECTED to the file
cat < file.txt       -> file.txt act as an input to cat
wc -c file.txt       -> count the number of word in file

# Pipe
command1 [arguments] | command2 [arguments]
ls -l | more      -> less = more + some addition features
ls -l | tail -1   -> show the last one

# File command
cp, rm, mv, mkdir, rmdir or rm -r, chgrp, chown

# Display command
cat, more, less, head, tail (more/less/head/tail are only useful for long files only)
tail -2 <file_name>     -> show the last two lines in a file
head -2 <file_name>     -> show the fist two lines in a file

# Some useful command
whoami, hostname, date

# grep/egrep -> awk -> cut (these three command always use together; grep consider for text/screen output, awk get the col, cut get few words)
grep | awk | cut    -> grep / pipe / awk / pipe / cut

# cut
• cut filename =
• cut --version =
• cut –c1 filename =
• cut –c1,2,4 =
• cut –c1-3 filename =
• cut –c1-3,6-8 filename =
• cut –b1-3 filename =
• cut -d: -f 6 /etc/passwd =
• cut -d: -f 6-7 /etc/passwd =
• ls –l | cut –c2-4 =
Does not work
Check version
List one character
Pick and chose character
List range of characters
List specific range of characters List by byte size
List first 6th column separated by :
List first 6 and 7th column separated by : Only print user permissions of files/dir
