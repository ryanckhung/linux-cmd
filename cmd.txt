# copy local file to remote server
scp localfile.tar developer@10.6.72.58:/home/developer/ryan
scp <localfile> <username>@<IP>:<DestinationFullPath>
scp <username>@<IP>:<RemoteFilePath> <local_dicrectory_path>

# cerate a user with a home directory and bash as shell
sudo useradd -m -d /home/test04/ -s /bin/bash test04
sudo passwd test04 
# -m creates the home directory if it does not exist.
# -d overrides the default home directory location. -s sets the login shell for the user.
# add the user to the sudo list
sudo usermod -aG sudo test04


# for restricted account use /bin/rbash which will limit it to work on the user home directory only
sudo useradd -m -d /home/test04/ -s /bin/rbash test04

#force the user to udpate the password during the next login
sudo chage -d 0 test04

# user list store in
/ect/passwd

# install docker
> sudo apt-get update
> sudo apt-get install docker.io
> sudo systemctl start docker

# if the application is .deb file download from the internet (eg. chrome)
> sudo dpkg -i xxx.deb



# Find all the files whose name is tecmint.txt in a current working directory.
> find . -name tecmint.txt
# Find all the files under /home directory with name tecmint.txt.
> find /home -name tecmint.txt
# Find all the files whose name is tecmint.txt and contains both capital and small letters in /home directory.
> find /home -iname tecmint.txt
# Find all directories whose name is Tecmint in / directory.
> find / -type d -name Tecmint
# Find all php files whose name is tecmint.php in a current working directory.
> find . -type f -name tecmint.php
# Find all php files in a directory.
> find . -type f -name "*.php"
# Find all the files whose permissions are 777.
> find . -type f -perm 0777 -print
# Find all the files without permission 777.
> find / -type f ! -perm 777
# Find all Read Only files.
> find / -perm /u=r
option -maxdepth can control the depth of searching


A filesystem is the methods and data structures that an operating system uses to keep track of files on a disk or partition; that is, the way the files are organized on the disk. The word is also used to refer to a partition or disk that is used to store the files or the type of the filesystem. Thus, one might say ``I have two filesystems'' meaning one has two partitions on which one stores files, or that one is using the ``extended filesystem'', meaning the type of the filesystem.


#wildcard
* - represents zero or more characters 
? - represents a single character
[] - represents a range of characters
ls [abc]*      -> list all files start with a/b/c and following anything
ls [a-c]*      -> same as above "a-c" mean abc
ls [a-c][b-z]* -> first character is a-c, the next char is b-z, then follow anything
ls [a-cx-z]*.  -> first character is abcxyz, then follow anything
ls he??o*      -> list all files start with "he" then following any 2 characters then "o" then anything


# hard link and soft link
ln f1.txt f1_link.txt    -> hard link (the content of either one change, both files content change; if the original file is gone, the link file will still exist)
ln -s f2.txt f2_link.txt -> soft link (the content of either one change, both files content change; if the original file is gone, the link file will become broken)


# command
command option(s) argument(s)


# file permission
rwx - read, write, execute
ugo - user, group, other(public)
chmod ugo+r <filename>
chmod 444 <filename>
chown changes the ownership of a file
chgrp changes the group ownership of a file
SUID, SGID, STICKY BIT
https://www.thegeekdiary.com/what-is-suid-sgid-and-sticky-bit/
rwSrwSrwT (first S = SUID, second S = SGID, T = stick bit)
> sudo chmod u+s myfile
> sudo chmod 4755 myfile (4755's 4 = u, 4755  = u+s)
similarly
> sudo chmod g+s myfile
> sudo chmod 2755 myfile (2755's 2=g, 2755=g+s)
Sticky bit make anyone can read or write; but only root or owner can delete it
> sudo chmod +t myfile     (t must be refer to other/public)
> sudo chmod 1755 myfile   (1755's 1=other, 1755=+t; )

# Help
whatis <command>   -> whatis ls
<command> –-help   -> ls -help 
man <command>      -> man ls


# input and output redirects
1. standard input (stdin) - 0    => eg. what you type in keyboard
2. standard output (stdout) - 1  => eg. what you see in the terminal; the terminal output can redirect to a file or ...
3. stadnard error (stderr) - 2   => eg. no permission to access the /root folder
example:
ls -l /root 2> errfile.txt  => not root user access /root folder will give permssion eror; 2 means stderr; this cmd will only redirect the err msg to file
File descriptor 1 is the standard output (stdout).
File descriptor 2 is the standard error (stderr).
2>&1  -> ">&" as redirect merger operator




# tee command
echo hello world > file.txt => this will recirect the output to file only; but not terminal
if you want to redirect the output to multiple place, you need to use tee. 
echo hello world | tee file.txt => this will output it to screen and file
echo hello world | tee -a file.txt => this will output it to screen and append (not rewrite because tee with -a option) new content to the file
echo hello | tee f1.txt f2.txt f3.txt   => output to terminal and multiple file


# Text Edit
vi
Redirect command output > or >> 
echo > or >>
ls -al > temp.txt       -> originally it is output to the sceen; but now the output is REDIRECTED to the file
cat < file.txt          -> file.txt act as an input to cat
wc -c file.txt          -> count the number of word in file
cat <<< "hello world"   -> <<< indicated the right hand side is string

在shell脚本中，默认情况下，总是有三个文件处于打开状态，标准输入(键盘输入)、标准输出（输出到屏幕）、标准错误（也是输出到屏幕），它们分别对应的文件描述符是0，1，2 。
>  默认为标准输出重定向，与 1> 相同
2>&1  意思是把 标准错误输出 重定向到 标准输出.
&>file  意思是把标准输出 和 标准错误输出 都重定向到文件file中

There are two main output streams in Linux (and other OSs), standard output (stdout) and standard error (stderr). 
Error messages, like the ones you show, are printed to standard error. 
The classic redirection operator (command > file) only redirects standard output, so standard error is still shown on the terminal. 
To redirect stderr as well, you have a few choices:
1. Redirect stdout to one file and stderr to another file:
> command > out 2>error
2. Redirect stdout to a file (>out), and then redirect stderr to stdout (2>&1):
> command >out 2>&1
3. Redirect both to a file
> command &> out

More example
> ls /root > err.txt    (assume you are not the root; this will not write anything to the err.txt; it show the error on the terminal)
> ls /root 2> err.txt   (assume you are not the root; this will output the error message to err.txt; it is "2>" but not "2 >")
> ls /root > success.txt 2> error.txt  (if the command success, will write to success.txt else write to error.txt)
> ls . > success.txt 2> error.txt      (if the command success, will write to success.txt else write to error.txt)





Flow to use (use up/down/left/right to move the key; not in insert mode)
1. use arrow key to move to the right place
2. click the command
3. then press escape key
4. loop to step 1
cmd: d - delete the whole line; x - remove a single char; i - insert character; a - similar to i but it is append; /xxx - serach xxx in the file; r - Replace
yy - copy the line; p - paste for a copied line
:q! - quit; :wq! - write then quit; Escape - escape mode
Cursor movement—h, j, k, l (left, down, up, and right)
0 - enter key to create a new line and auto enter the insert mode


# Pipe
command1 [arguments] | command2 [arguments]
ls -l | more      -> less = more + some addition features
ls -l | tail -1   -> show the last one


# File command
cp, rm, mv, mkdir, rmdir or rm -r, chgrp, chown


# Display command
cat, more, less, head, tail (more/less/head/tail are only useful for long files only)
tail -2 <file_name>     -> show the last two lines in a file
head -2 <file_name>     -> show the fist two lines in a file



# Some useful command
whoami, hostname, date
whereis <cmd>              -> show the path of the command and also it's config file
alias                      -> full command map to shortcut command
file <filename>            -> determine file type
edquota                    -> edit user quotas


# grep/egrep -> awk -> cut (these three command always use together; grep consider for text/screen output, awk get the col, cut get few words)
grep | awk | cut    -> grep / pipe / awk / pipe / cut


# cut (consider in character level; -c1-10 means get char 1 to 10 of each row)
> cut filename = Does not work
> cut --version = Check version
> cut –c1 filename = List one character
> cut –c1,2,4 filename = Pick and chose character
> cut –c1-3 filename = List range of characters
> cut –c1-3,6-8 filename = List specific range of characters 
> cut –b1-3 filename = List by byte size
> cut -d: -f 6 /etc/passwd = List first 6th column separated by :
> cut -d: -f 6-7 /etc/passwd = List first 6 and 7th column separated by : 
> ls –l | cut –c2-4 = Only print user permissions of files/dir


# awk (proess row by small inline program)
> awk --version = Check version
> awk ‘{print $1}’ file = List 1st field from a file
> ls –l | awk ‘{print $1,$3}’ = List 1 and 3rd field of ls –l output
> ls –l | awk ‘{print $NF}’ = Last field of the output
> awk '/Jerry/ {print}' file = Search for a specific word
> awk -F: '{print $1}' /etc/passwd = Search for a specific word
> echo "Hello Tom" | awk '{$2="Adam"; print $0}‘ = Ouput only 1st field of /etc/passwd
> cat file | awk '{$2=“Imran"; print $0}‘ = Replace words field words
> awk 'length($0) > 15‘ file = Replace words field words
> ls -l | awk '{if($9 == "seinfeld") print $0;}‘ = Get lines that have more than 15 byte size
> ls -l | awk '{print NF}‘ = Get the field matching seinfeld in /home/iafzal = Number of fields.
* NF means last column, $1 means column 1; $2 means column 2; $0 means all column
*-F: means : is delimiter (default is separated by space)


# grep / egrep (egrep is the extended version of grep, can search for multiple keywords from a file) (grep get keyword from a row)
> grep –-version OR grep --help = Check version or help
> grep keyword file = Search for a keyword from a file
> grep –c keyword file = Search for a keyword and count
> grep –i KEYword file = Search for a keyword ignore case-sensitive
> grep –n keyword file = Display the matched lines and their line numbers (same as "grep keyword file" but with line number)
> grep –v keyword file = Display everything but keyword (all but exclude the keyword)
> grep keyword file | awk ‘{print $1}’ = Search for a keyword and then only give the 1st field • ls –l | grep Desktop = Search for a keyword and then only give the 1st field
> egrep –i “keyword|keyword2” file = Search for 2 keywords.
* grep with -i options means ignore case sensitivity
* grep with -c search keyword and count
* egrep search multiple keyword from a single file


# sort and uniq (sort the content inside the file or output from terminal)
> sort –-version OR sort --help = Check version or help
> sort file = Sorts file in alphabetical order
> sort –r file = Sort in reverse alphabetical order 
> sort –k2 file = Sort by field number
> uniq file = Removes duplicates (uniq must work with sort; uniq alone is not working)
> sort file | uniq = Always sort first before using uniq their line numbers 
> sort file | uniq –c = Sort first then uniq and list count
> sort file | uniq –d = Only show repeated lines.
> ls -l | sort -k9
* sort -k2 means sort by column 2 (defualt delimiter is space)


# wc (word counter; newline count, word count, and byte count)
> wc <filename>
> ls -l | grep drw | wc


# compare file; diff (compare line by line); cmp (compare byte by byte)


# compress; tar and gzip
> tar cvf xxx.tar xxx   -> create a tar file (xxx.tar) from xxx fold
> tar xcf xxx.tar       -> extract a tar file
> tar tvf xxx.tar       -> list the content inside the tar file
> gzip xxx.tar          -> zip the tar file (xxx.tar will be deleted and created a xxx.tar.gz)
> gzip -d xxx.tar.gz    -> unzip the tar file (xxx.tar.gz will be deleted and created a xxx.tar file)


# truncate command is often used to shrink or extend the size of a file to the specified size
> truncate –s 10 <filename>     -> chop it into 10 bytes


# combine and splitting file
> cat file1 file2 file3 > file4
> split –l 300 file.txt childfile   -> Split file.txt into 300 lines per file and output to childfileaa, childfileab and childfileac


# sed command have the following functions:
• Replace a string in a file with a newstring • Find and delete a line
• Remove empty lines
• Remove the first or n lines in a file
• To replace tabs with spaces
• Show defined lines from a file • Substitute within vi editor
• And much more...

sed 's/Kenny/Lenny//g' <filename>       -> search Kenny and replace with Lenny globally (will not update the file)
sed -i 's/Kenny/Lenny//g' <filename>    -> same as above but "-i" will allow overwrite
sed '/peter/d' <filename>               -> delete all lines with peter (put -i if need to update the file)
sed '/^$/d' <filename>                  -> delete all emptylines; ^ starting $ ending; ^$ nothing inside between start and end means empty lines
sed '1d' <filename>                     -> first line of the file is deleted
sed '1,2d' <filename>                   -> delete the frist two lines of the file
sed 's/\t/ \g' <filename>               -> replace tab(\t) with space(/ ) globally (\g)
sed -n 12,18p <filename>                -> show line 12-18 only
* -i will overwrite the file



The tr command can perform operations like removing repeated characters, converting uppercase to lowercase, and basic character replacing and removing. Typically, it is used in combination with other commands through piping.
> echo "hello      world" > a.txt
> tr -s ' '  < a.txt                      -> remove many space into single space


# account management
> useradd spiderman       -> create an account (may not create /home/spiderman)
> id spiderman            -> check created user account (check userid groupid)
> groupadd superheros     -> create group
> cat /etc/group          -> check group
> userdel -r spiderman    -> delete user (-r option will remove /home/spiderman)
> groupdel superheros     -> delete group

> useradd ironman                   -> create a user will auso add it into the group with the same name
> id ironman                        -> check group name = user name
> groupadd superheros               -> create a user group
usermod (use to update user info, eg add an existing user info to group)
> usermod -G superheros ironman     -> change group
> id ironman                        -> now you can see uid=1001(ironman) gid=1001(ironman) groups=1001(ironman),1002(superheros) [ironman belongs to both ironman and superheros group]
> grep ironman /etc/group

a more complete way to create an account; -g (group) -s (shell) -c (content description) -m -d(home directory)
> useradd -g superheros -s /bin/bash -c "heros" -m -d /home/spiderman spiderman
> passwd spiderman

Commands
• useradd • groupadd • userdel • groupdel • usermod
Files
• /etc/passwd • /etc/group • /etc/shadow



Acount management
> su - spiderman    -> assume you are ironman now, you want to switch to spiderman, type "su - spiderman"
> exist             -> switch back to orignal user (ironman in this case)
> su -              -> swithc to root  (should use "sudo -i")
> sudo -i           -> login as root
> whoami            -> check the current user
if you are ironman, you can't access /home/spiderman. (unless permission is given)
after created the account, the root user need to add the sudo permission to this newly created account
the following line add permission for ironman to run sudo
> sudo usermod -aG sudo ironman
> cat /etc/sudoers


Monitor Users
> who                                       -> how many people currently login
> last                                      -> details login status
> last | awk '{print $1}'                   -> show 1st column of the login details
> last | awk '{print $1}' | sort | uniq     -> only show the unique user
> w                                         -> similar to who but with more details


Talking to Users
> wall              -> send message to all user; after type wall; then edit message; then Ctrl+D will boardcast to all Users
> users             -> see who is online
> write <username>  -> send to particalar user;        



System command
> date
> uptime        -> how long the system is up
> hostname
> uname -a      -> Linux version
> which <cmd>   -> where is the cmd located in the machine
> whereis <cmd> -> similar to which but it also tell where is the config file
> cal           -> show the calender
> cal 6 1978    -> show that month only
> cal 2021      -> show all months in year 2021
> bc            -> calculator


Application = Services
Daemon is something continue running in the background until interrupt
> systemctl or service
> ps
> top                   -> show base on the load
> kill <process_id>     -> kill the process; can use "systemctl top" or "kill" to stop a services like apache server
> kill -9 <process_id>  -> add -9 if simple kill <process id> is not working
> crontab               -> schedule a task
> at                    -> similar to crontab but in one time basis

To start an application
> systemctl restart ntpd    -> ntpd the final "d" stand for daemon
> ps -ef | grep ntpd
> systemctl status ntpd     -> check service status
> systemctl stop ntpd       -> stop service
> ps -ef | grep ntpd
> systemctl enable ntpd
> top
> systemctl stop ntpd   OR    kill <processid>


Corn
cron is a Unix, solaris, Linux utility that allows tasks to be automatically run in the background at regular intervals by the cron daemon.
Crontab (CRON TABle) is a file which contains the schedule of cron entries to be run and at specified times. 
Cron job or cron schedule is a specific set of execution instructions specifing day, time and command to execute. crontab can have multiple execution statments.
> crontab -e = Edit crontab file, or create one if it doesn’t already exist.
> crontab -l = crontab list of cronjobs , display crontab file contents.
crontab -r = Remove your crontab file.
A crontab file has five fields for specifying day , date and time followed by the command to be run at that interval.
*  *  *  *  * command to execute
[min(0-59), hour(0-23), day(1-31), month(1-12), week(0-6; 0 sunday)]
30 18 * * * rm /home/someuser/tmp/*
30  0  1  1,6,12  *  =>  00:30 Hrs on 1st of Jan, June & Dec. 
0  20  *  10  1-5  =>  8.00 PM every weekday (Mon-Fri) only in Oct
0  0  1,10,15 *  *  =>  midnight on 1st ,10th & 15th of month
5,10  0  10  *  1  =>  At 12.05,12.10 every Monday & on 10th of every month
Related file => /etc/cron.d/
> ls -l /etc/cron.*
> cd /etc
> ls -l | grep cron
if you want to run the script daily, put it in /etc/cron.daily
/etc/cron.hourly, /etc/cron.monthly, /etc/cron.weekly

> cat /etc/anacrontab       -> check what is running
> cat /etc/cron.d/0hourly   -> check hourly cron job

the modulus operator(/) to run a cron job after every specific time interval. 
For instance, to run a cron job after every 15 minutes,
*/15

sudo nano /etc/crontab

How to use it?
> export EDITOR=vi                                                      -> set the editor to vi by the terminal command
> crontab -e                                                            -> will redirect to vi editor
> * * * * * /bin/echo "success" >> /Users/ryan/Desktop/temp/cron.txt    -> key in the this in the vi editor
after you write the command by crontab -e; save it; then it will automatically run the schedule task
other examples: > * * * * * /bin/date >> /Users/ryan/Desktop/temp/date.txt  -> output date time



Process (try the following one by one; jobs - display the status of jobs in the current shell)
> sleep 50
> Ctrl+z        (stop sleep 50)
> sleep 50 &    (make the command to run in background)
> jobs          (list all the stop/running command)
> ps -ef | grep sleep
> fg            (bring backgound process ot foreground)
> Ctrl + z      (will bring the just fg command stopped)
> bg            (make the command to background)
> jobs

> nice -n 5 sleep 50    (change the priority of the process)
nice range from -20 to 19; lower number higher priortiy

> sleep 100
> Ctrl+z        (after you stop it then type bg, will make the stop task keep running in background)
> bg            (no need to enter any option, it will send sleep 50 to background)
> jobs          (list all stop/running command)




System
> top
> df -h
> dmesg                 (system error/warning message - eg. memory leak)
> iostat
> iostat 1              (refresh every 1 second)
> netstat -rw
> free                  (read memeory)
> cat /proc/cpuinfo
> cat /proc/memoinfo


Log 
/var/log (this folder contain a list of info about log)
eg /var/log/boot.log    (about boot)
   /var/log/cron        (about cron)
   /var/log/secure      (about login)


System Maintenance (need to be root)
> shutdown
> init 0-6           (init 6 = reboot)
> reboot
> halt               (force to shutdown = force to press the physical power button)
> shutdown -r now    (shutdown immediately)
> poweroff



hostname (must be root)
> hostname
> cat /etc/hostname
> hostnamectl set-hostname hostname
> cat /etc/hostname (or > hostname)



Finding System Info.
> uname -a      (find the linux version)
> dmidecode
> arch          (32/64 bits)



Terminal cmd
> clear
> exit
> script filename.log   (will start record all the thing happen in the terminal; type "exit" to quit)
after you type "script filename.log" -> it will show "Script started, file is filename.log"
then it will keep recording all the things you type; type "exit" to quit; then it will show "Script done, file is filename.log"
there is a file filename.log is created



Recover root password (just for simple reference)
1. Restart computer
2. edit GRUB
3. change password
4. reboot



Environment Variable
> printenv          (view the environment variable)
> env               (=printenv)
> echo $SHELL       (view a particalar variable; $SHELL is one of the variable name; $ is env. var.)
> echo $PATH
> echo $HOME
> export TEST=1     (set environment variable; this is not permanently; this env var will loss after terminal closed)
> echo $TEST        (read the environment variable)
set enviroment variable permanently, you need to do the following:
> vi .bashrc
> TEST='123'        (add this line to .bashrc)
> export TEST       (add this line to .bashrc)
set global enviroment variable permanently
> vi /etc/profile or > vi /etc/bashrc
> TEST='123'                (add this line to the file)
> export TEST               (add this line to the file)
$HOME -> start with $ sign means environment variable
> cd $HOME  (same as cd ~)
> echo $HOME




System Run Level (in root level)
> init 0-6 
Main Run level
• 0     Shut down (or halt) the system
• 1     Single-user mode; usually aliased as s or S
• 6     Reboot the system
Other Run levels
• 2     Multiuser mode without networking
• 3     Multiuser mode with networking
• 5     Multiuser mode with networking and GUI.
> who -r    (check which run level currently in)


Linux Boot process
BIOS -> MBR (Master Boot Record) -> GRUB (Grand Unified Bootloader) -> Kernel -> Init -> Runlevel


Message of the day
message located in /etc/motd
> vi /etc/motd      -> write something in the /etc/motd file, eg "Hello World"
quit and then relogin, then you will see the "Hello World" message


Disk partition
> df -h             -> check disk free
> fdisk -l          -> tell how much the disk total size is and how many partition is created)
Add a hard drive into the machine
> fdisk -l          -> you can see /dev/sdb is added (/dev/sdb is the name of the harddisk)
> fdisk /dev/sdb    -> create the new partition, after entering this command you need to follow the instruction step by step
press "n" for create a partition
then it will ask if it's primary or extended
press "p" for primary
finally press "w" to write the table to the disk and exist  (udemy lesson 168)
after created, type > fdisk -l (then you will see /dev/sdb1 - partition 1 is created)
after crated the partition, we need to assign file system by the following command
> mkfs.xfs /dev/sdb/
then create a folder called data under root (that's /data)
then mount the drive to the /data by 
> mount /dev/sdb/ /data
> df -h      (check the disk)
* up to this moment, after reboot, it will unmounted, to prevent it's gone after rebook, we need to
> vi /etc/fstab     (then add the following line to this file)
/dev/sdb/   /data   xfs     defaults    0   0

in general:
partition   ->  assign file system  ->  mount


> tune2fs -> adjust tunable filesystem parameters on ext2/ext3/ext4 filesystems


Logical Volume Management (LVM)
LVM allows disk to be combined together
when created a partition, you can select LVM
Hard disk -> /dev/sda, /dev/sdb, /dev/sdc
partition -> /dev/sda1, /dev/sda2, /dev/sda3


Swap Space
swap space = use harddisk to store memory data (when the ram is full)
can set swap size = 2 x ram size
> free -m   (check memory)
> dd if=/dev/zero of=/newswap bs=1M count 1024 (create 1G file)
> mkswap /newswap       (swap is make; this will be gone after reboot)
> swapon /newswap       (swap is on; this will be gone after reboot)
> free -m
to make it save after reboot
> vi /etc/fstab     (add the following line into the file)
/newswap    swap    swap    defaults    0   0



RAID
RAID0: eg. 2 harddisk, 5G+5G=10G (no duplication)
RAID1: eg. 2 harddisk, 5G+5G=5G  (fully duplicated)
RAID5: eg. at least 3 harddisk, 5G+5G+5G=12G    (can recover if one disk is failed)




Network Files
/etc/nsswitch.conf
/etc/hosts                       (The /etc/hosts is an operating system file that translate hostnames or domain names to IP addresses. )
/etc/hostname
/etc/sysconfig/network-scripts
/etc/resolv.conf                (tells the dns server)
/etc/hosts.allow                (list of hosts that are allowed to access the system)

> vi /etc/hosts  (like a DHCP server, you can add the local host IP and the name here)
inside the file, you can write
127.0.0.1 ryanhung
save it and then run 
> ping ryanhung

network command
> ping
> ifconfig
> ifup or ifdown    (make an interface up or down)
> netstat -rnv      (check the gateway)
> tcpdump -i enp0s3 (provide the interface name and check the traffic in and out)
> ip
> route
> route and > netstat  (show the routing table)



Network Interface Card (NIC)
> ifconfig                      (show all the interface name)
> ethtool <interface_name>      (show the details of the interface)
lo = loopback device is a special interface that your computer uses to communicate with itself. It is used mainly for diagnostics and troubleshooting, and to connect to servers running on the local machine.
virb0 = virtual bridge 0 interface is used for NAT. Virtual enviroments sometimes use it to connect to the outside network.

NIC Bonding (details refer to session 131)
NIC bonding is also known as Networking Bonding. It can be defined as the aggregation of mulitple NIC into a signle bond interface.
It's main purpose is to provide high availability and redundancy.
Simply speaking NIC bonding is use to bind severals ports together and use it as a single interface.


Downloading Files or Apps (wget)
wget just like the browswer to download something from the internet
> wget http://website.com/filename      (this will save it as a file, even it's a html page)



Network Commands
> ping
> curl <url>


the following path tell the Debian Linux where to load the package
/etc/apt/sources.list



FTP - Port 21
server need to run the ftpd (d stand for daemon) @ port 21
> sudo apt-get install vsftpd   (this is server)
> vi /etc/vsftpd.conf           (backup before make any change)
inside /etc/vsftpd.conf, remove the comment of "write_enable=YES"
inside /etc/vsftpd.conf, add "local_root=/home/ryanhung/Desktop/ftp" 
> systemctl restart vsftpd

> systemctl start vsftpd
> systemctl status vsftpd
> systemctl enable vsftpd
> systemctl stop firewalld
> systemctl disable firewalld

install ftp in client
> sudo apt-get instll ftp
> ftp 192.168.1.x
then enter usersname password, then it will enter "ftp>"
ftp> bin
ftp> hash
ftp> put <filename>         (upload file)
ftp> get <filename>         (download file)
ftp> bye                    (quit ftp)



RSYNC
rsync is a utility for efficiently transferring and synchronizing files within the same computer or to a remote computer by comparing the modification times and sizes of files
this utility is mostly used to backup the files and directories from one server to another
rsync port = 22 (same as ssh)
assume first time abc.txt is 2M and transfer from machine A to machine B
then next time abc.txt is updated to 3M, then only 1M (the diff. part) is transfer from machine A to machine B
installation
> apt-get install rsync     
cmd format: rysnc options source Destination
rsync a file on a local machine
> rsync -zvh backup.tar /tmp/backups/
rsync a directory on a local machine
> rsync -azvh /home/ryanhung /tmp/backups/
rsync a file to a remote machine
> rsync -avz backup.tar ryanhung@192.168.0.10:/tmp/backups
rsync a file from a remote machine
rsync -avzh ryanhung@192.168.0.10:/home/ryanhung/serverfile /tmp/backups   (home/ryanhung/serverfile is the remote file; /tmp/backups is the local destination)


Hostname or IP Lookup
> nslookup                  (then it enter a tool; type the domain name like www.google.com; it will return the ip address; type "exit" to quit the tool)
> nslookup www.google.com   (then it shows the answer directly)
> dig www.google.com        (similar to nslookup; DNS lookeup)



Network Time Protocol (NTP) for time synchronization
Install: sudo apt-get install ntp
Port: 123
File: /etc/ntp.conf
Service systemctl restart ntpd
command: ntpq
8.8.8.8 is google dns server
> ps -ef  | grep ntp            (check if ntp is running)
> ntpq                          (then it will enter the tool mode, you can type "peers" to check the time server; type "quit" to leave)




Trace Network traffic (traceroute)
traceroute is used to map the journey that a packet of information undertakes from its soruce to its destination. traceroute can be used to locate when data loss occurs throughout a network, which could signify a node that's down.
also can help to identiy the slow points
> traceroute www.google.com




Central Logger (rsyslog) - need to try it out by yourself
Purpose: Generate logs or collect logs from other servers
Reference: https://linoxide.com/how-to-setup-central-logging-server-using-rsyslog-on-ubuntu-20-04/
Config. file: /etc/rsyslog.conf
> sudo apt-get install rsyslog
> ps -aux   | grep rsyslog
> vi /etc/rsyslog.conf          
inside the above file, uncomment the following lines
# provides UDP syslog reception
module(load="imudp")
input(type="imudp" port="514")
# provides TCP syslog reception
module(load="imtcp")
input(type="imtcp" port="514")
> systemctl restart rsyslog
> systemctl enable rsyslog




Sendmail (for details, need to try it later)
Purpose: send and receive emails, usually use when something finsihed then send an email for notification
> sudo apt-get install sendmail
> sudo apt-get install sendmail-cf
> cd /etc/mail
Files:
/etc/mail/sendmail.mc
/etc/mail/sendmail.cf
/etc/mail
> systemctl restart sendmail
> mail -s "subject line" name@mydomain.com



SSH-Keys - Access Remote Server without password
Keys are generated at user level
Generate the keys in client side. Copy the Keys from client to server.
[Step 1-3 are done in client side]
Step 1 - Generate the Keys in client side
> ssh-keygen
Step 2 - Copy the key to the server from client side
> ssh-copy-id root@192.168.1.10
Step 3 - Login from client to server
> ssh root@192.168.1.10



Shell Script example
#!/bin/bash
# Simple output script
echo "Hello World"
save it as test.sh and then change the permission to
> chmod 744 test.sh 
> ./test.sh             (to run the shell script)



The SysV init is a standard process used by Red Hat Linux to control which software the init command launches or shuts off on a given runlevel.